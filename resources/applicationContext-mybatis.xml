<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	<!--第一步： 自动扫描 扫描service包和dao包的注解-->
	<context:component-scan base-package="cn.appsys.dao"></context:component-scan>
	<context:component-scan base-package="cn.appsys.service"></context:component-scan>

	<!-- 第二步：读取数据库的配置文件 -->
	<context:property-placeholder location="classpath:database.properties" />
	<!-- 第三步：获取数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close" scope="singleton">
		<property name="driverClassName" value="${driver}"></property>
		<property name="url" value="${url}"></property>
		<property name="username" value="${user}"></property>
		<property name="password" value="${password}"></property>
		<property name="initialSize" value="${initialSize}"></property>
		<property name="maxActive" value="${maxActive}"></property>
		<property name="maxIdle" value="${maxIdle}"></property>
		<property name="minIdle" value="${minIdle}"></property>
		<property name="maxWait" value="${maxWait}"></property>
		<property name="removeAbandoned" value="${removeAbandoned}"></property>
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"></property>
		<!-- sql心跳 -->
		<property name="testWhileIdle" value="true"></property>
		<property name="testOnBorrow" value="false"></property>
		<property name="testOnReturn" value="false"></property>
		<property name="validationQuery" value="select 1"></property>
		<property name="timeBetweenEvictionRunsMillis" value="60000"></property>
		<property name="numTestsPerEvictionRun" value="${maxActive}"></property>


	</bean>

	
	
<!-- 第四步：数据库的 AOP事务处理开始 -->

<!-- 事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<aop:aspectj-autoproxy />
	<aop:config proxy-target-class="true">
		<aop:pointcut expression="execution(* *cn.appsys.service..*(..))"
			id="transService" />
		<aop:advisor pointcut-ref="transService" advice-ref="txAdvice" />
	</aop:config>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="smbms*" propagation="REQUIRED"
				rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
<!-- 数据库的 AOP事务处理结束 -->


<!-- 第五步：指定mybatis的配置文件路径 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<!-- 如果你的UserMapper接口和UserMapper.xml文件不在同一包下，就要配置 -->
		<!-- <property name="mapperLocations">
		<list>
			<value>classpath:cn/smbms/dao/**/*.xml</value>
		</list>
		</property> -->
	</bean>
	
<!--第六步： 给dao包里接口自动生成实现类文件-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.appsys.dao" />
	</bean>
</beans>
